name: 'Terraform'

on:
  push:
    branches:
      - 'test'
  pull_request:
    branches:
      - 'test'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Output Terraform version for debugging
      - name: Terraform Version
        run: terraform version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      #- name: Terraform Format
      #  run: |
      #    terraform fmt -check

        # Generate and show an execution plan
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="confluent_cloud_api_key=${{ secrets.CONFLUENT_CLOUD_API_KEY }}" \
            -var="confluent_cloud_api_secret=${{ secrets.CONFLUENT_CLOUD_API_SECRET }}" \
            -var="credentials_key=${{ secrets.CREDENTIALS_KEY }}" \
            -var="credentials_secret=${{ secrets.CREDENTIALS_SECRET }}" \
            -var="kafka_cluster_id=${{ secrets.KAFKA_CLUSTER_ID }}" \
            -var="rest_endpoint=${{ secrets.REST_ENDPOINT }}" \
            -var="schema_registry_cluster_id=${{ secrets.SCHEMA_REGISTRY_CLUSTER_ID }}" \
            -var="schema_registry_rest_endpoint=${{ secrets.SCHEMA_REGISTRY_REST_ENDPOINT }}" \
            -var="schema_registry_api_key=${{ secrets.SCHEMA_REGISTRY_API_KEY }}" \
            -var="schema_registry_api_secret=${{ secrets.SCHEMA_REGISTRY_API_SECRET }}" \
            -input=false

        # Apply a Terraform execution plan to change the infrastructure
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: |
          terraform apply \
            -var="confluent_cloud_api_key=${{ secrets.CONFLUENT_CLOUD_API_KEY }}" \
            -var="confluent_cloud_api_secret=${{ secrets.CONFLUENT_CLOUD_API_SECRET }}" \
            -var="credentials_key=${{ secrets.CREDENTIALS_KEY }}" \
            -var="credentials_secret=${{ secrets.CREDENTIALS_SECRET }}" \
            -var="kafka_cluster_id=${{ secrets.KAFKA_CLUSTER_ID }}" \
            -var="rest_endpoint=${{ secrets.REST_ENDPOINT }}" \
            -var="schema_registry_cluster_id=${{ secrets.SCHEMA_REGISTRY_CLUSTER_ID }}" \
            -var="schema_registry_rest_endpoint=${{ secrets.SCHEMA_REGISTRY_REST_ENDPOINT }}" \
            -var="schema_registry_api_key=${{ secrets.SCHEMA_REGISTRY_API_KEY }}" \
            -var="schema_registry_api_secret=${{ secrets.SCHEMA_REGISTRY_API_SECRET }}" \
            -auto-approve \
            -input=false
